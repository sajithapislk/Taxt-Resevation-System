// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Schema;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240929040241_AddTables")]
    partial class AddTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backend.Schema.Entity.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<string>("EndAddress")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("EndLatitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("EndLongitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("StartAddress")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("StartLatitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("StartLongitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("backend.Schema.Entity.DriverFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedUserId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.ToTable("DriverFeedbacks");
                });

            modelBuilder.Entity("backend.Schema.Entity.PasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("backend.Schema.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DriverState")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@system.com",
                            MobileNo = "0712312312",
                            Name = "System",
                            Password = "$argon2id$v=19$m=65536,t=3,p=1$CAEIGkJw72/gNfcR+CG+Kg$aoVCfSUWYPN991y0z6kKeoMF6ipo7Z6NWn06RQYcjrE",
                            Role = (byte)4,
                            Username = "admin_1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "sajith@apis.lk",
                            MobileNo = "0772193832",
                            Name = "Sajith",
                            Password = "$argon2id$v=19$m=65536,t=3,p=1$pQfu6ufc8unAWMZIqhZ/7g$i2e/Mv8z2nLXt3duprIPEng0BQUZWdXyiWXm23UVcSQ",
                            Role = (byte)3,
                            Username = "sajith_2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mohammedsaheer987@gmail.com",
                            MobileNo = "0712805509",
                            Name = "Saheer",
                            Password = "$argon2id$v=19$m=65536,t=3,p=1$t3UVEC2kEn3lNgPTlL2FfQ$5F/tLyZexAIQm0E0Invf2+jqdlm8xrqp8ULpzdA3NWE",
                            Role = (byte)3,
                            Username = "mohammedsaheer987_3"
                        },
                        new
                        {
                            Id = 4,
                            Email = "abduljizzi@gmail.com",
                            MobileNo = "0759424247",
                            Name = "Abdul",
                            Password = "$argon2id$v=19$m=65536,t=3,p=1$d0gsCrLVZoRQOmdMAfQa+w$94R/R5n8K8RBPlBwaLnH8wAFmav6jdwR31abQ3269so",
                            Role = (byte)2,
                            Username = "abduljizzi_4"
                        },
                        new
                        {
                            Id = 5,
                            Email = "nifraz@live.com",
                            MobileNo = "0712319319",
                            Name = "Nifraz",
                            Password = "$argon2id$v=19$m=65536,t=3,p=1$QENgi439+D5Wl3SeV9FgQg$O/t0pPWCb3KgHw6APAVjkrhxpq2SV6tfmUaEiYe1Vnk",
                            Role = (byte)2,
                            Username = "nifraz_5"
                        });
                });

            modelBuilder.Entity("backend.Schema.Entity.UserFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedUserId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.ToTable("UserFeedbacks");
                });

            modelBuilder.Entity("backend.Schema.Entity.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("CostPerKm")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailableAC")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxLoad")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PassengerSeat")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("backend.Schema.Entity.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("backend.Schema.Entity.Booking", b =>
                {
                    b.HasOne("backend.Schema.Entity.User", "CreatedUser")
                        .WithMany("CreatedBookings")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("backend.Schema.Entity.User", "DeletedUser")
                        .WithMany("DeletedBookings")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("backend.Schema.Entity.User", "LastModifiedUser")
                        .WithMany("LastModifiedBookings")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("backend.Schema.Entity.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Schema.Entity.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("backend.Schema.Entity.DriverFeedback", b =>
                {
                    b.HasOne("backend.Schema.Entity.Booking", "Booking")
                        .WithOne("DriverFeedback")
                        .HasForeignKey("backend.Schema.Entity.DriverFeedback", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Schema.Entity.User", "CreatedUser")
                        .WithMany("CreatedDriverFeedbacks")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("backend.Schema.Entity.User", "DeletedUser")
                        .WithMany("DeletedDriverFeedbacks")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("backend.Schema.Entity.User", "LastModifiedUser")
                        .WithMany("LastModifiedDriverFeedbacks")
                        .HasForeignKey("LastModifiedUserId");

                    b.Navigation("Booking");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");
                });

            modelBuilder.Entity("backend.Schema.Entity.PasswordReset", b =>
                {
                    b.HasOne("backend.Schema.Entity.User", "CreatedUser")
                        .WithMany("CreatedPasswordResets")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("backend.Schema.Entity.User", "DeletedUser")
                        .WithMany("DeletedPasswordResets")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("backend.Schema.Entity.User", "LastModifiedUser")
                        .WithMany("LastModifiedPasswordResets")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("backend.Schema.Entity.User", "User")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Schema.Entity.User", b =>
                {
                    b.HasOne("backend.Schema.Entity.User", "CreatedUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("backend.Schema.Entity.User", "DeletedUser")
                        .WithMany("DeletedUsers")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("backend.Schema.Entity.User", "LastModifiedUser")
                        .WithMany("LastModifiedUsers")
                        .HasForeignKey("LastModifiedUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");
                });

            modelBuilder.Entity("backend.Schema.Entity.UserFeedback", b =>
                {
                    b.HasOne("backend.Schema.Entity.Booking", "Booking")
                        .WithOne("UserFeedback")
                        .HasForeignKey("backend.Schema.Entity.UserFeedback", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Schema.Entity.User", "CreatedUser")
                        .WithMany("CreatedUserFeedbacks")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("backend.Schema.Entity.User", "DeletedUser")
                        .WithMany("DeletedUserFeedbacks")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("backend.Schema.Entity.User", "LastModifiedUser")
                        .WithMany("LastModifiedUserFeedbacks")
                        .HasForeignKey("LastModifiedUserId");

                    b.Navigation("Booking");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");
                });

            modelBuilder.Entity("backend.Schema.Entity.Vehicle", b =>
                {
                    b.HasOne("backend.Schema.Entity.User", "CreatedUser")
                        .WithMany("CreatedVehicles")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("backend.Schema.Entity.User", "DeletedUser")
                        .WithMany("DeletedVehicles")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("backend.Schema.Entity.User", "Driver")
                        .WithMany("Vehicles")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Schema.Entity.User", "LastModifiedUser")
                        .WithMany("LastModifiedVehicles")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("backend.Schema.Entity.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("Driver");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("backend.Schema.Entity.VehicleType", b =>
                {
                    b.HasOne("backend.Schema.Entity.User", "CreatedUser")
                        .WithMany("CreatedVehicleTypes")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("backend.Schema.Entity.User", "DeletedUser")
                        .WithMany("DeletedVehicleTypes")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("backend.Schema.Entity.User", "LastModifiedUser")
                        .WithMany("LastModifiedVehicleTypes")
                        .HasForeignKey("LastModifiedUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");
                });

            modelBuilder.Entity("backend.Schema.Entity.Booking", b =>
                {
                    b.Navigation("DriverFeedback");

                    b.Navigation("UserFeedback");
                });

            modelBuilder.Entity("backend.Schema.Entity.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CreatedBookings");

                    b.Navigation("CreatedDriverFeedbacks");

                    b.Navigation("CreatedPasswordResets");

                    b.Navigation("CreatedUserFeedbacks");

                    b.Navigation("CreatedUsers");

                    b.Navigation("CreatedVehicleTypes");

                    b.Navigation("CreatedVehicles");

                    b.Navigation("DeletedBookings");

                    b.Navigation("DeletedDriverFeedbacks");

                    b.Navigation("DeletedPasswordResets");

                    b.Navigation("DeletedUserFeedbacks");

                    b.Navigation("DeletedUsers");

                    b.Navigation("DeletedVehicleTypes");

                    b.Navigation("DeletedVehicles");

                    b.Navigation("LastModifiedBookings");

                    b.Navigation("LastModifiedDriverFeedbacks");

                    b.Navigation("LastModifiedPasswordResets");

                    b.Navigation("LastModifiedUserFeedbacks");

                    b.Navigation("LastModifiedUsers");

                    b.Navigation("LastModifiedVehicleTypes");

                    b.Navigation("LastModifiedVehicles");

                    b.Navigation("PasswordResets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("backend.Schema.Entity.Vehicle", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("backend.Schema.Entity.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
